// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post_images.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addPostImage = `-- name: AddPostImage :one
INSERT INTO post_images (post_id, url, is_primary)
VALUES ($1, $2, $3)
RETURNING id, post_id, url, is_primary, created_at
`

type AddPostImageParams struct {
	PostID    uuid.UUID
	Url       string
	IsPrimary pgtype.Bool
}

func (q *Queries) AddPostImage(ctx context.Context, arg AddPostImageParams) (PostImage, error) {
	row := q.db.QueryRow(ctx, addPostImage, arg.PostID, arg.Url, arg.IsPrimary)
	var i PostImage
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Url,
		&i.IsPrimary,
		&i.CreatedAt,
	)
	return i, err
}

const deleteImageByID = `-- name: DeleteImageByID :exec
DELETE FROM post_images
WHERE id = $1
`

func (q *Queries) DeleteImageByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteImageByID, id)
	return err
}

const deleteImagesByPostID = `-- name: DeleteImagesByPostID :exec
DELETE FROM post_images
WHERE post_id = $1
`

func (q *Queries) DeleteImagesByPostID(ctx context.Context, postID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteImagesByPostID, postID)
	return err
}

const getImagesByPostID = `-- name: GetImagesByPostID :many
SELECT id, post_id, url, is_primary, created_at FROM post_images
WHERE post_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetImagesByPostID(ctx context.Context, postID uuid.UUID) ([]PostImage, error) {
	rows, err := q.db.Query(ctx, getImagesByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostImage
	for rows.Next() {
		var i PostImage
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Url,
			&i.IsPrimary,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrimaryImageForPost = `-- name: GetPrimaryImageForPost :one
SELECT id, post_id, url, is_primary, created_at FROM post_images
WHERE post_id = $1 AND is_primary = TRUE
LIMIT 1
`

func (q *Queries) GetPrimaryImageForPost(ctx context.Context, postID uuid.UUID) (PostImage, error) {
	row := q.db.QueryRow(ctx, getPrimaryImageForPost, postID)
	var i PostImage
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Url,
		&i.IsPrimary,
		&i.CreatedAt,
	)
	return i, err
}
